# -*- coding: utf-8 -*-
# @Author: YokDen
# @Time: 2022/10/18
# @Email: dyk_693@qq.com

# Form implementation generated from reading ui file 'SlidePuzzle.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import random
import sys

from PyQt5.QtMultimedia import QSound
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QIcon, QBrush, QPixmap, QPalette
from PyQt5.QtWidgets import QFileDialog, QMessageBox

import imagebox
import selectbox


class Ui_SlidePuzzle(object):
    def __init__(self):
        self.selectbox = selectbox.SelectBox()                      # 初始化选择框
        self.selectbox.setWindowModality(Qt.ApplicationModal)       # 设置选择框出现时阻塞主窗体运行
        self.imagebox = imagebox.ImageBox()                         # 初始化图片框
        # self.imagebox.setWindowModality(Qt.ApplicationModal)
        self.backmusic = QSound("music/backmusic.wav")              # 初始化背景音乐
        self.backmusic.setLoops(QSound.Infinite)
        self.play_music()

    def setupUi(self, SlidePuzzle):
        SlidePuzzle.setObjectName("SlidePuzzle")
        SlidePuzzle.resize(1100, 845)
        SlidePuzzle.setFixedSize(1100, 845)
        SlidePuzzle.setWindowIcon(QIcon("images/puzzle.png"))
        palette = QtGui.QPalette()
        palette.setBrush(SlidePuzzle.backgroundRole(), QBrush(
            QPixmap("images/background.png").scaled(SlidePuzzle.size(), QtCore.Qt.IgnoreAspectRatio,
                                                    QtCore.Qt.SmoothTransformation)))
        SlidePuzzle.setPalette(palette)
        self.centralwidget = QtWidgets.QWidget(SlidePuzzle)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(820, 30, 241, 331))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(10, 10, 10, 10)
        self.verticalLayout.setSpacing(20)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton_new = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_new.sizePolicy().hasHeightForWidth())
        self.pushButton_new.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_new.setFont(font)
        self.pushButton_new.setObjectName("pushButton_new")
        self.verticalLayout.addWidget(self.pushButton_new)
        self.pushButton_watch_img = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_watch_img.sizePolicy().hasHeightForWidth())
        self.pushButton_watch_img.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_watch_img.setFont(font)
        self.pushButton_watch_img.setObjectName("pushButton_watch_img")
        self.verticalLayout.addWidget(self.pushButton_watch_img)
        self.label_time = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label_time.setFont(font)
        self.label_time.setAlignment(QtCore.Qt.AlignCenter)
        self.label_time.setObjectName("label_time")
        self.verticalLayout.addWidget(self.label_time)
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(10, 10, 800, 800))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setContentsMargins(10, 10, 10, 10)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout.addLayout(self.gridLayout)
        SlidePuzzle.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(SlidePuzzle)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1052, 22))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        SlidePuzzle.setMenuBar(self.menubar)
        self.actionnew = QtWidgets.QAction(SlidePuzzle)
        self.actionnew.setObjectName("actionnew")
        self.actionnew.setShortcut("F1")
        self.actionchoice = QtWidgets.QAction(SlidePuzzle)
        self.actionchoice.setObjectName("actionchoice")
        self.actionchoice.setShortcut("F2")
        self.actionclose = QtWidgets.QAction(SlidePuzzle)
        self.actionclose.setObjectName("actionclose")
        self.actionclose.setShortcut("alt+F4")
        self.actionhelp = QtWidgets.QAction(SlidePuzzle)
        self.actionhelp.setObjectName("actionhelp")
        self.actionabout = QtWidgets.QAction(SlidePuzzle)
        self.actionabout.setObjectName("actionabout")
        self.menu.addAction(self.actionnew)
        self.menu.addAction(self.actionchoice)
        self.menu.addSeparator()
        self.menu.addAction(self.actionclose)
        self.menu_2.addAction(self.actionhelp)
        self.menu_2.addAction(self.actionabout)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())

        self.retranslateUi(SlidePuzzle)
        QtCore.QMetaObject.connectSlotsByName(SlidePuzzle)

        # 实例化拼图对象
        self.puzzle = Puzzle(self.gridLayout, self.selectbox, self.imagebox, self.label_time, self.pushButton_watch_img)
        self.pushButton_watch_img.hide()
        self.connecter()

    def retranslateUi(self, SlidePuzzle):
        _translate = QtCore.QCoreApplication.translate
        SlidePuzzle.setWindowTitle(_translate("SlidePuzzle", "Slide Puzzle"))
        self.pushButton_new.setText(_translate("SlidePuzzle", "新游戏"))
        self.pushButton_watch_img.setText(_translate("SlidePuzzle", "查看原图"))
        self.label_time.setText(_translate("SlidePuzzle", "0"))
        self.menu.setTitle(_translate("SlidePuzzle", "游戏"))
        self.menu_2.setTitle(_translate("SlidePuzzle", "帮助"))
        self.actionnew.setText(_translate("SlidePuzzle", "新游戏"))
        self.actionchoice.setText(_translate("SlidePuzzle", "选项"))
        self.actionclose.setText(_translate("SlidePuzzle", "关闭"))
        self.actionhelp.setText(_translate("SlidePuzzle", "查看帮助"))
        self.actionabout.setText(_translate("SlidePuzzle", "关于"))

    def connecter(self):
        self.pushButton_new.clicked.connect(self.puzzle.restart)
        self.actionnew.triggered.connect(self.puzzle.restart)
        self.pushButton_watch_img.clicked.connect(self.imagebox.show)
        self.actionchoice.triggered.connect(self.selectbox.show)
        self.actionclose.triggered.connect(MainWindow.close)
        self.selectbox.checkBox.clicked.connect(self.play_music)
        self.actionabout.triggered.connect(self.about)
        self.actionhelp.triggered.connect(self.help)

    def play_music(self):        # 背景音乐控制
        if self.selectbox.checkBox.isChecked():
            self.backmusic.play()
        else:
            self.backmusic.stop()

    def about(self):
        widget = QtWidgets.QWidget()
        widget.setWindowIcon(QIcon("images/about.png"))
        QMessageBox.about(widget, "关于", "It's a puzzle game designed by YokDen")

    def help(self):
        widget = QtWidgets.QWidget()
        widget.setWindowIcon(QIcon("images/help.png"))
        QMessageBox.about(widget, "帮助", "玩法：\n游戏开始后，你需要点击这些拼图来移动它们，使他们恢复原样")

class PuzzlePart(QtWidgets.QPushButton):    # 拼图块类
    def __init__(self):
        super(PuzzlePart, self).__init__()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.setFont(font)
        self.id = -1            # 拼图块id，作为其标识
        self.pos = -1           # 拼图块位置id，标明其位置
        self.clicked.connect(self.write_id)     # 拼图块被单击时，拼图的now_id发生改变

    def write_id(self):
        Puzzle.now_id = self.id


class Puzzle:                       # 拼图类
    group = []                      # 拼图包含的拼图块
    img_group = []                  # 分割后图片组
    now_id = -1                     # 当前正在被单击的拼图块位置id
    space_id = -1                   # 当前空格所在的位置id

    def __init__(self, gridlayout: QtWidgets.QGridLayout, select_box: selectbox.SelectBox, image_box: imagebox.ImageBox,
                 label_time: QtWidgets.QLabel, pub_watch_img: QtWidgets.QPushButton):
        self.selectbox = select_box                 #
        self.imagebox = image_box
        self.gridLayout = gridlayout
        self.label_time = label_time
        self.pushButton_watch_img = pub_watch_img
        self.n = self.selectbox.spinBox.value()         # 获取选择框内设置的游戏难度（拼图阶数）
        self.img_path = ""                              # 图片模式下，当前图片所在的路径
        self.sound = QSound("music/sound.wav")          # 初始化按键音效
        self.group_len = 0                              # 拼图块个数
        self.status = 0                                 # 当前模式，0表示图块展示为数字，1表示为图片
        self.timer = QTimer()                           # 计时
        self.time = 0                                   # 游戏经过时间
        self.connecter()
        self.restart()

    def connecter(self):                                # 关联信号与槽
        self.selectbox.radioButton_3.clicked.connect(self.change_status)
        self.selectbox.radioButton.clicked.connect(self.change_status)
        self.selectbox.radioButton_2.clicked.connect(self.change_status)
        self.selectbox.radioButton_4.clicked.connect(self.change_status)
        self.pushButton_watch_img.clicked.connect(self.watch_img)
        self.timer.timeout.connect(self.show_time)

    def restart(self):                                 # 重设游戏
        self.n = self.selectbox.spinBox.value()
        self.group_len = self.n ** 2
        for part in self.group:
            part.deleteLater()
        self.group.clear()
        if not self.status == 0:
            self.img_group.clear()
            print(self.img_path)
            self.img = QPixmap(self.img_path)
            img_len = min(self.img.height(), self.img.width()) // self.n
            for i in range(self.n):
                for j in range(self.n):
                    self.img_group.append(
                        self.img.copy(j * img_len, i * img_len, img_len, img_len).scaled(790//self.n, 790//self.n))
        for i in range(self.group_len):
            puzzlepart = PuzzlePart()
            self.group.append(puzzlepart)
            puzzlepart.id = i
            puzzlepart.pos = i
            puzzlepart.setIconSize(puzzlepart.size())
            self.set_surface(puzzlepart)
            puzzlepart.clicked.connect(self.slide)
            self.set_pos(puzzlepart, i // self.n, i % self.n)
        self.new()

    def new(self):                                  # 对棋盘进行随机排列
        num = self.group_len
        arr = random.sample(range(num), num)
        for i, j in enumerate(arr):
            if j == num - 1:
                self.group[i].hide()
                self.space_id = i
        # 数字华容道，必然有解，只存在于如下3个细分情形：
        #
        # 若格子列数为奇数，则逆序数必须为偶数；
        # 若格子列数为偶数，且逆序数为偶数，则当前空格所在行数与初始空格所在行数的差为偶数；
        # 若格子列数为偶数，且逆序数为奇数，则当前空格所在行数与初始空格所在行数的差为奇数。
        res = [i for i in arr if i != num - 1]
        cnt = 0  # 求逆序数
        for i in range(1, num - 1):
            for j in range(i):
                if res[j] > res[i]:
                    cnt += 1
        space_delta = self.n - self.space_id // self.n - 1  # 当前空格所在行数与初始空格所在行数的差
        if (self.n % 2 and cnt % 2) or (
                self.n % 2 == 0 and (cnt % 2 == 0 and space_delta % 2 or cnt % 2 and space_delta % 2 == 0)):
            if self.space_id >= self.n:
                arr[0], arr[1] = arr[1], arr[0]
            else:
                arr[self.n], arr[self.n + 1] = arr[self.n + 1], arr[self.n]
        for i, part in enumerate(self.group):
            part.pos = arr[i]
            self.set_surface(part)
        print(arr)
        self.time = 0
        self.label_time.setText("0")
        self.timer.stop()

    def set_pos(self, puzzle_part, x, y):                     # 设置图片所在的相对位置
        self.gridLayout.addWidget(puzzle_part, x, y, 1, 1)

    def slide(self):                                          # 图块移动
        self.play_sound()
        if not self.timer.isActive():
            self.timer.start(1000)
        now_part = self.group[self.now_id]
        space_part = self.group[self.space_id]
        if self.now_id // self.n == self.space_id // self.n and (
                self.now_id == self.space_id - 1 or self.now_id == self.space_id + 1) or \
                self.now_id % self.n == self.space_id % self.n and (
                self.now_id == self.space_id - self.n or self.now_id == self.space_id + self.n):
            now_part.pos, space_part.pos = space_part.pos, now_part.pos
            now_part.hide()
            space_part.show()
            self.set_surface(now_part)
            self.set_surface(space_part)
            self.space_id = self.now_id
        self.check_win()

    def check_win(self):                                     # 检查拼图是否恢复原样
        for i, part in enumerate(self.group):
            if part.pos != i:
                return False
        self.group[self.space_id].show()
        # for part in self.group:
        #     part.setEnabled(False)
        self.timer.stop()
        widget = QtWidgets.QWidget()
        widget.setWindowIcon(QIcon("images/puzzle.png"))
        QMessageBox.about(widget, "恭喜", f"你的用时是{self.time}秒")
        return True

    def show_time(self):                                    # 更新游戏时间
        self.time += 1
        self.label_time.setText(str(self.time))

    def set_surface(self, part: PuzzlePart):                # 设置图块样式
        if self.status == 0:
            part.setText(str(part.pos + 1))
        else:
            part.setIcon(QIcon(self.img_group[part.pos]))

    def play_sound(self):                                   # 播放按键音效
        if self.selectbox.checkBox_2.isChecked():
            self.sound.play()

    def watch_img(self):                                    # 查看原图
        palette = QtGui.QPalette()
        palette.setBrush(self.imagebox.backgroundRole(), QBrush(
            self.img.scaled(self.imagebox.size(), QtCore.Qt.IgnoreAspectRatio, QtCore.Qt.SmoothTransformation)))
        self.imagebox.setPalette(palette)
        # self.imagebox.label.setPixmap(self.img)

    def change_status(self):                                # 选择图块样式
        if self.selectbox.radioButton.isChecked():
            self.status = 0
            self.img_path = ""
            self.pushButton_watch_img.hide()
        elif self.selectbox.radioButton_2.isChecked():
            self.status = 1
            self.img_path = "images/img1.jpg"
            self.pushButton_watch_img.show()
        elif self.selectbox.radioButton_3.isChecked():
            self.status = 2
            self.img_path = "images/img2.jpg"
            self.pushButton_watch_img.show()
        else:
            self.status = 3
            self.pushButton_watch_img.show()
            path, filetype = QFileDialog.getOpenFileName(self.selectbox, "打开图片", "./",
                                                         "图片 (*.bmp; *.jpg; *.jpeg; *.png)")
            if path:
                self.img_path = path
            else:
                self.selectbox.radioButton.setChecked(True)
                self.status = 0
                self.pushButton_watch_img.hide()


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_SlidePuzzle()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
